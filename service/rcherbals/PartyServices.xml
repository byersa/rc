<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.2.xsd">
	<service verb="getPartyList" type="script" authenticate="false"
	         location="component://rc/script/rcherbals/party/getPartyList.groovy">
	    <in-parameters>
	        <parameter name="lastName" required="false"/>
	        <parameter name="firstName" required="false"/>
	    </in-parameters>
	    <out-parameters>
	        <parameter name="items" type="List" required="true"/>
	        <parameter name="identifier" required="true" default-value="partyId"/>
	    </out-parameters>
	</service>
	<service verb="queryParty" type="script" authenticate="false"
	         location="component://rc/script/rcherbals/party/queryParty.groovy">
	    <in-parameters>
	        <parameter name="partyTypeEnumId" required="false"/>
	        <parameter name="firstName" required="false"/>
	        <parameter name="lastName" required="false"/>
	        <parameter name="organizationName" required="false"/>
	        <parameter name="emailAddress" required="false"/>
	        <parameter name="phoneNumber" required="false"/>
	        <parameter name="city" required="false"/>
	        <parameter name="state" required="false"/>
	    </in-parameters>
	    <out-parameters>
	        <parameter name="items" type="List" required="true"/>
	    </out-parameters>
	</service>

    <service verb="storeParty" type="inline" authenticate="false">
        <in-parameters>
            <parameter name="data" type="Map" required="false"/>
        </in-parameters>
	    <out-parameters>
	        <parameter name="items" type="List" required="false"/>
	    </out-parameters>
        <actions>
            <script><![CDATA[
            import groovy.json.JsonSlurper

            ec.artifactExecution.disableAuthz()            
            org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger("addNewParty")
            logger.info("in addNewParty 2, data: ${ec.web.parameters}")
            def slurper = new JsonSlurper()
            def data = slurper.parseText(ec.web.parameters.data)
            //logger.info("result: ${result}")
            ]]></script>
            <log message="data  1:  ${data}"/>
            <if condition="data.partyId">
                <then>
                    <entity-find-one entity-name="Party" value-field="party">
                        <field-map field-name="partyId" from="data.partyId"/>
                    </entity-find-one>
                    <log message="party  (edit  1):  ${party}"/>

                    <if condition="data.partyTypeEnumId=='PtyPerson'">
                        <then>
                            <entity-find-one entity-name="Person" value-field="person">
                                <field-map field-name="partyId" from="data.partyId"/>
                            </entity-find-one>
                            <log message="person  (edit  1):  ${person}"/>
                            <entity-set value-field="person" map="data"/>
                            <entity-update value-field="person"/>
                            <log message="person  (edit  2):  ${person}"/>
                        </then>
                        <else>
                            <entity-find-one entity-name="Organization" value-field="organization">
                                <field-map field-name="partyId" from="data.partyId"/>
                            </entity-find-one>
                            <log message="organization  (edit  1):  ${organization}"/>
                            <entity-set value-field="organization" map="data"/>
                            <entity-update value-field="organization"/>
                            <log message="organization  (edit  2):  ${organization}"/>
                        </else>
                    </if>                
                </then>
                <else>
                    <entity-make-value entity-name="Party" value-field="party"/>
                    <log message="party  (create  1):  ${party}"/>
                    <entity-set value-field="party" include="nonpk" map="data"/>            
                    <entity-sequenced-id-primary value-field="party"/>
                    <entity-create value-field="party"/>  
                    <log message="party  2:  ${party}"/>
                    <set field="data.partyId" from="party.partyId"/>
                            
                    <if condition="data.partyTypeEnumId=='PtyPerson'">
                            <entity-make-value entity-name="Person" value-field="person"/>
                            <entity-set value-field="person" include="nonpk" map="data"/>  
                            <log message="person:  ${person}"/>
                            <set field="person.partyId" from="party.partyId"/>
                            <log message="person2:  ${person}"/>
                            <entity-create value-field="person"/>  
                            <log message="person3:  ${person}"/>
                        <else>
                            <entity-make-value entity-name="Organization" value-field="organization"/>
                            <entity-set value-field="organization" include="nonpk" map="data"/>  
                            <log message="organization:  ${organization}"/>
                            <set field="organization.partyId" from="party.partyId"/>
                            <log message="organization2:  ${organization}"/>
                            <entity-create value-field="organization"/>  
                            <log message="organization3:  ${organization}"/>
                        </else>
                    </if>
                </else>
            </if>
            
            <check-errors/>
            <iterate list="data.postalData" entry="postal">
                        <log message="postal  (0):  ${postal}"/>
                <if condition="postal.contactMechId">
                    <then>
                        <log message="postal.contactMechId  (0):  ${postal.contactMechId}"/>
                        <set field="thisContactMechId" from="postal.contactMechId"/>
                        <log message="thisContactMechId  (0):  ${thisContactMechId}"/>
                        <entity-find entity-name="PartyContactMechPostalAddress" list="postalAddressList">
                            <econditions>
                                <econdition field-name="partyId" from="party.partyId"/>
                                <econdition field-name="contactMechId" from="thisContactMechId"/>
                            </econditions>
                        </entity-find>
                        <check-errors/>
                        <log message="postalAddressList:  ${postalAddressList}"/>
                        <set field="postalAddress" from="postalAddressList ?  postalAddressList[0]  :  null"/>
                        <if condition="!postalAddress">
                            <return/>
                        </if>
                        <if>
                            <condition>
                                    <expression>
                                    !((postal.address1 == postalAddress.address1) &amp;&amp; (postal.address2 == postalAddress.address2))
                                    </expression>
                                        <!--compare field="postal.address1" to-field="postalAddress.address1"/>
                                        <compare field="postal.address2" to-field="postalAddress.address2"/>
                                        <compare field="postal.city" to-field="postalAddress.city"/>
                                        <compare field="postal.stateProvinceGeoId" to-field="postalAddress.stateProvinceGeoId"/>
                                        <compare field="postal.postalCode" to-field="postalAddress.postalCode"/>
                                        <compare field="postal.contactMechPurposeId" to-field="postalAddress.contactMechPurposeId"/>
                                        <compare field="postal.fromDate" to-field="postalAddress.fromDate"/>
                                        <compare field="postal.thruDate" to-field="postalAddress.thruDate"/-->
                                
                            </condition>
                            <then>
                                <set field="postal.partyId" from="party.partyId"/>
                                <log message="postal  4:  ${postal},  party.partyId:  ${party.partyId}"/>
                            
                                <service-call name="mantle.party.ContactServices.update#PartyPostalAddress" in-map="postal" out-map="postalOut">
                                </service-call>
                                <log message="postalOut  4:  ${postalOut}"/>
                                <check-errors/>
                                <set field="postal.contactMechId" from="postalOut.contactMechId"/>
                            </then>
                        </if>
                    </then>
                    <else>
                        <set field="postal.partyId" from="party.partyId"/>
                        <set field="postal.contactMechTypeEnumId" value="CmtPostalAddress"/>
                        <log message="postal  2:  ${postal},  party.partyId:  ${party.partyId}"/>
                    
                        <service-call name="mantle.party.ContactServices.create#PostalAddress" in-map="postal" out-map="postalOut">
                        </service-call>
                        <log message="postalOut  2:  ${postalOut}"/>
                        <check-errors/>
                        <set field="postal.contactMechId" from="postalOut.contactMechId"/>
                    </else>
                </if>
            </iterate>
            <log message="data.postalData  1:  ${data.postalData}"/>
<!--            
            <log message="data.emailData  1:  ${data.emailData}"/>
            <iterate list="data.emailData" entry="email">
                <if condition="email.contactMechId">
                    <then>
                        <entity-find-one entity-name="PartyContactMechInfo" value-field="emailAddress">
                            <econditions>
                                <econdition field-name="partyId" from="party.partyId"/>
                                <econdition field-name="contactMechId" from="email.contactMechId"/>
                            </econditions>
                        </entity-find-one>
                        <check-errors/>
                        <if>
                            <condition>
                                <not>
                                    <and>
                                        <compare field="email.infoString" to-field="emailAddress.infoString"/>
                                        <compare field="email.contactMechPurposeId" to-field="emailAddress.contactMechPurposeId"/>
                                        <compare field="email.fromDate" to-field="emailAddress.fromDate"/>
                                        <compare field="email.thruDate" to-field="emailAddress.thruDate"/>
                                    </and>
                                </not>
                            </condition>
                            <then>
                                <log message="email  1:  ${email},  party.partyId:  ${party.partyId}"/>
                            
                                <service-call name="mantle.party.ContactServices.update#PartyContactOther" in-map="email" out-map="emailOut">
                                </service-call>
                                <log message="emailOut  1:  ${emailOut}"/>
                                <check-errors/>
                            </then>
                        </if>
                    </then>
                    <else>
                        <set field="email.partyId" from="party.partyId"/>
                        <set field="email.contactMechTypeEnumId" value="CmtTelecomNumber"/>
                        <log message="email  1:  ${email},  party.partyId:  ${party.partyId}"/>
                    
                        <service-call name="mantle.party.ContactServices.create#EmailAddress" in-map="email" out-map="emailOut">
                        </service-call>
                        <log message="emailOut  1:  ${emailOut}"/>
                        <check-errors/>
                        <set field="email.contactMechId" from="emailOut.contactMechId"/>
                    </else>
                </if>
            </iterate>
            <log message="data.emailData  1:  ${data.emailData}"/>
            
            <iterate list="data.phoneData" entry="phone">
                <set field="phone.partyId" from="party.partyId"/>
                <set field="phone.contactMechTypeEnumId" value="CmtTelecomNumber"/>
                <log message="phone:  ${phone}"/>
                <service-call name="mantle.party.ContactServices.createTelecomNumber" in-map="phone" out-map="phoneOut">
                </service-call>
                <check-errors/>
                <set field="phone.contactMechId" from="phoneOut.contactMechId"/>
            </iterate>
            <log message="data.phoneData  1:  ${data.phoneData}"/>
            
            <log message="data.phoneData  2:  ${data.phoneData}"/>
            <iterate list="data.phoneData" entry="phone">
                <if condition="phone.contactMechId">
                    <then>
                        <entity-find-one entity-name="PartyContactMechTelecomNumber" value-field="telecomNumber">
                            <econditions>
                                <econdition field-name="partyId" from="party.partyId"/>
                                <econdition field-name="contactMechId" from="phone.contactMechId"/>
                            </econditions>
                        </entity-find-one>
                        <check-errors/>
                        <if>
                            <condition>
                                <not>
                                    <and>
                                        <compare field="phone.infoString" to-field="telecomNumber.contactNumber"/>
                                        <compare field="phone.contactMechPurposeId" to-field="telecomNumber.contactMechPurposeId"/>
                                        <compare field="phone.fromDate" to-field="telecomNumber.fromDate"/>
                                        <compare field="phone.thruDate" to-field="telecomNumber.thruDate"/>
                                    </and>
                                </not>
                            </condition>
                            <then>
                                <log message="phone  1:  ${phone},  party.partyId:  ${party.partyId}"/>
                            
                                <service-call name="mantle.party.ContactServices.update#PartyContactOther" in-map="phone" out-map="phoneOut">
                                </service-call>
                                <log message="phoneOut  1:  ${phoneOut}"/>
                                <check-errors/>
                            </then>
                        </if>
                    </then>
                    <else>
                        <set field="phone.partyId" from="party.partyId"/>
                        <set field="phone.contactMechTypeEnumId" value="CmtTelecomNumber"/>
                        <log message="phone  1:  ${phone},  party.partyId:  ${party.partyId}"/>
                    
                        <service-call name="mantle.party.ContactServices.create#PartyTelecomNumber" in-map="phone" out-map="phoneOut">
                        </service-call>
                        <log message="phoneOut  1:  ${phoneOut}"/>
                        <check-errors/>
                        <set field="phone.contactMechId" from="phoneOut.contactMechId"/>
                    </else>
                </if>
            </iterate>
            <log message="data.phoneData  1:  ${data.phoneData}"/>
            -->
            <if condition="!data.partyId">
                <entity-make-value entity-name="PartyRole" value-field="partyRole"/>
                <set field="partyRole.partyId" from="party.partyId"/>
                <set field="partyRole.roleTypeId" value="Reseller"/>
                <entity-create value-field="partyRole"/>  
                    <check-errors/>
                <log message="partyRole  1:  ${partyRole}"/>
                
                <entity-make-value entity-name="PartyRelationship" value-field="partyRelation"/>
                <set field="partyRelation.toPartyId" value="RCHERBALS"/>
                <set field="partyRelation.toRoleTypeId" value="Owner"/>
                <set field="partyRelation.fromPartyId" from="party.partyId"/>
                <set field="partyRelation.fromRoleTypeId" value="Reseller"/>
                <set field="partyRelation.relationshipTypeEnumId" value="PrtCustomer"/>
                <set field="partyRelation.fromDate" from="ec.user.nowTimestamp"/>
                <entity-sequenced-id-primary value-field="partyRelation"/>
                <entity-create value-field="partyRelation"/>  
                    <check-errors/>
                <log message="partyRelation  2:  ${partyRelation}"/>
            </if>
            <log message="result  2:  ${result}"/>
            <script><![CDATA[
            //import groovy.json.JsonBuilder
            //def jsonBuilder = new JsonBuilder(data)
            //result.data = jsonBuilder.toString()
            //logger.info("in addNewParty 3, data: ${result.data}")
            result.items = [data];
            ]]></script>
        </actions>
    </service>
    
    <service verb="storeParty2" type="inline" authenticate="false">
        <in-parameters>
            <parameter name="firstName" required="false"/>
            <parameter name="middleName"/>
            <parameter name="lastName" required="false"/>

	        <parameter name="organizationName" required="false"/>
            
            <parameter name="newPassword" required="false"/>
            <parameter name="newPasswordVerify" required="false"/>

            <parameter name="currencyUomId"/>
            <parameter name="locale"/>
            <parameter name="parentPartyId"/>
            
            <parameter name="primaryRoleTypeId" />
            <parameter name="partyTypeEnumId" />
            <parameter name="statusId" />
            
            <parameter name="postalContactMechId" type="String" required="false"/>
            <parameter name="countryGeoId" type="String" required="false"/>
            <parameter name="address1" type="String" required="false"/>
            <parameter name="address2" type="String" required="false"/>
            <parameter name="city" type="String" required="false"/>
            <parameter name="stateProvinceGeoId" type="String" required="false"/>
            <parameter name="postalCode" type="String" required="false"><text-digits/></parameter>

            <parameter name="telecomContactMechId" type="String" required="false"/>
            <parameter name="areaCode" type="String" required="false"><text-digits/></parameter>
            <parameter name="contactNumber" type="String" required="false"><text-digits/></parameter>

            <parameter name="emailContactMechId" type="String" required="false"/>
            <parameter name="emailAddress" required="false"></parameter>
            <parameter name="postalContactMechPurposeId" required="false" default-value="PRIMARY_LOCATION"/>
            <parameter name="telecomContactMechPurposeId" required="false" default-value="PRIMARY_PHONE"/>
            <parameter name="emailContactMechPurposeId" required="false" default-value="PRIMARY_EMAIL"/>
        </in-parameters>
        <out-parameters>
            <parameter name="partyId" required="true"/>
            <parameter name="postalContactMechId" required="false"/>
            <parameter name="telecomContactMechId" required="false"/>
            <parameter name="emailContactMechId" required="false"/>
        </out-parameters>

        <actions>
            <set field="result.partyId" from="partyId"/>
                    <log level="info" message="storeParty, context: ${context}"/>
            <if condition="!partyId">
                <service-call name="create#Party" in-map="[partyTypeEnumId:partyTypeEnumId]" out-map="newPartyOut"/>
                    <check-errors>
                    <log level="info" message="CreateRegister(1b) errors: ${ec.getMessage().getErrorsString()}"/>
                    </check-errors>
                    <log level="info" message="CreateRegister(1a) newPartyOut: ${newPartyOut}"/>
                    <set field="result.partyId" from="newPartyOut.partyId"/>
            </if>
            
            <if condition="partyId">
                <if condition="partyTypeEnumId == 'PtyPerson'">
                    <entity-find-one entity-name="Person" value-field="origPerson"/>
                    <script>newPerson = origPerson.cloneValue()</script>
                    <entity-set value-field="newPerson" include="nonpk"/>
                    <if condition="newPerson != origPerson">
                        <service-call name="update#Person" in-map="newPerson"/>
                    </if>
                </if>
                <if condition="partyTypeEnumId == 'PtyOrganization'">
                    <entity-find-one entity-name="Organization" value-field="origOrganization"/>
                    <script>newOrganization = origOrganization.cloneValue()</script>
                    <entity-set value-field="newOrganization" include="nonpk"/>
                    <if condition="newOrganization != origOrganization">
                        <service-call name="update#Organization" in-map="newOrganization"/>
                    </if>
                </if>
            </if>
            
            <if condition="!partyId">
                <if condition="partyTypeEnumId == 'PtyPerson'">
                    <service-call name="create#Person" in-map="context">
                        <field-map field-name="partyId" from="result.partyId"/>
                    </service-call>
                </if>
                <if condition="partyTypeEnumId == 'PtyOrganization'">
                    <service-call name="create#Organization" in-map="context">
                        <field-map field-name="partyId" from="result.partyId"/>
                    </service-call>
                </if>
            </if>
            
            <if condition="postalContactMechId">
                <service-call name="mantle.party.ContactServices.update#PartyPostalAddress" in-map="context" out-map="paOut">
                    <field-map field-name="partyId" from="result.partyId"/>
                    <field-map field-name="contactMechId" from="postalContactMechId"/>
                    <field-map field-name="contactMechPurposeId" from="postalContactMechPurposeId"/>
                </service-call>
                <check-errors>
                <log level="info" message="CreateRegister(2a) errors: ${ec.getMessage().getErrorsString()}"/>
                </check-errors>

                <else>
                  <if condition="address1 || address2 || city || postalCode || stateProvinceGeoId">
                    <service-call name="mantle.party.ContactServices.create#PostalAddress" in-map="context" out-map="paOut">
                        <field-map field-name="partyId" from="result.partyId"/>
                        <field-map field-name="contactMechPurposeId" from="postalContactMechPurposeId"/>
                    </service-call>
                    <check-errors>
                    <log level="info" message="CreateRegister(2b) errors: ${ec.getMessage().getErrorsString()}"/>
                    </check-errors>
                    <set field="result.postalContactMechId" from="paOut.contactMechId"/>
                  </if>
                </else>
            </if>
            
            
            <if condition="telecomContactMechId">
                <service-call name="mantle.party.ContactServices.update#PartyTelecomNumber" in-map="context" out-map="tnOut">
                    <field-map field-name="partyId" from="result.partyId"/>
                    <field-map field-name="contactMechId" from="telecomContactMechId"/>
                    <field-map field-name="contactMechPurposeId" from="telecomContactMechPurposeId"/>
                </service-call>
                <check-errors>
                <log level="info" message="CreateRegister(3a) errors: ${ec.getMessage().getErrorsString()}"/>
                </check-errors>

                <else>
                  <if condition="contactNumber">
                    <service-call name="mantle.party.ContactServices.create#TelecomNumber" in-map="context" out-map="tnOut">
                        <field-map field-name="partyId" from="result.partyId"/>
                        <field-map field-name="contactMechPurposeId" from="telecomContactMechPurposeId"/>
                    </service-call>
                    <check-errors>
                    <log level="info" message="CreateRegister(3b) errors: ${ec.getMessage().getErrorsString()}"/>
                    </check-errors>
                    <set field="result.telecomContactMechId" from="tnOut.contactMechId"/>
                  </if>
                </else>
            </if>
            
            <check-errors>
            <log level="info" message="CreateRegister(2b) errors: ${ec.getMessage().getErrorsString()}"/>
            </check-errors>
            
            <if condition="emailContactMechId">
                <service-call name="mantle.party.ContactServices.update#PartyContactOther" in-map="context" out-map="eaOut">
                    <field-map field-name="partyId" from="result.partyId"/>
                    <field-map field-name="infoString" from="emailAddress"/>
                    <field-map field-name="contactMechId" from="emailContactMechId"/>
                    <field-map field-name="contactMechPurposeId" from="emailContactMechPurposeId"/>
                </service-call>
                <check-errors>
                <log level="info" message="CreateRegister(4a) errors: ${ec.getMessage().getErrorsString()}"/>
                </check-errors>

                <else>
                  <if condition="emailAddress">
                    <service-call name="mantle.party.ContactServices.create#EmailAddress" in-map="context" out-map="eaOut">
                        <field-map field-name="partyId" from="result.partyId"/>
                        <field-map field-name="contactMechPurposeId" from="emailContactMechPurposeId"/>
                    </service-call>
                    <check-errors>
                    <log level="info" message="CreateRegister(4b) errors: ${ec.getMessage().getErrorsString()}"/>
                    </check-errors>
                    <set field="result.emailContactMechId" from="eaOut.contactMechId"/>
                  </if>
                </else>
            </if>
            <check-errors>
            <log level="info" message="CreateRegister(5c) errors: ${ec.getMessage().getErrorsString()}"/>
            </check-errors>
        </actions>
    </service>
    
    <service verb="getPartyAndContacts" type="inline" authenticate="false">
        <in-parameters>
            <parameter name="partyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="firstName" required="false"/>
            <parameter name="middleName"/>
            <parameter name="lastName" required="false"/>

	        <parameter name="organizationName" required="false"/>
            
            <parameter name="newPassword" required="false"/>
            <parameter name="newPasswordVerify" required="false"/>

            <parameter name="currencyUomId"/>
            <parameter name="locale"/>
            <parameter name="parentPartyId"/>
            
            <parameter name="primaryRoleTypeId" />
            <parameter name="partyTypeEnumId" />
            <parameter name="statusId" />
            
            <parameter name="postalContactMechId" type="String" required="false"/>
            <parameter name="countryGeoId" type="String" required="false"/>
            <parameter name="address1" type="String" required="false"/>
            <parameter name="address2" type="String" required="false"/>
            <parameter name="city" type="String" required="false"/>
            <parameter name="stateProvinceGeoId" type="String" required="false"/>
            <parameter name="postalCode" type="String" required="false"><text-digits/></parameter>

            <parameter name="telecomContactMechId" type="String" required="false"/>
            <parameter name="areaCode" type="String" required="false"><text-digits/></parameter>
            <parameter name="contactNumber" type="String" required="false"><text-digits/></parameter>

            <parameter name="emailContactMechId" type="String" required="false"/>
            <parameter name="emailAddress" required="false"></parameter>
            <parameter name="postalContactMechPurposeId" required="false" default-value="PRIMARY_LOCATION"/>
            <parameter name="telecomContactMechPurposeId" required="false" default-value="PRIMARY_PHONE"/>
            <parameter name="emailContactMechPurposeId" required="false" default-value="PRIMARY_EMAIL"/>
            <parameter name="partyId" required="true"/>
            <parameter name="postalContactMechId" required="false"/>
            <parameter name="telecomContactMechId" required="false"/>
            <parameter name="emailContactMechId" required="false"/>
        </out-parameters>

        <actions>
            <entity-find-one entity-name="Party" value-field="returnParty"/>
            <set field="partyTypeEnumId" from="returnParty.partyTypeEnumId"/>
            <check-errors/>
            <if condition="returnParty.partyTypeEnumId == 'PtyPerson'">
                <entity-find-one entity-name="Person" value-field="origPerson"/>
                <check-errors/>
                <set field="firstName" from="origPerson.firstName"/>
                <set field="middleName" from="origPerson.middleName"/>
                <set field="lastName" from="origPerson.lastName"/>
            </if>
            <if condition="partyTypeEnumId == 'PtyOrganization'">
                <entity-find-one entity-name="Organization" value-field="origOrganization"/>
                <check-errors/>
                <set field="organizationName" from="origOrganization.organizationName"/>
            </if>
            
            <entity-find entity-name="PartyContactMechPostalAddress" value-field="PCMPAList">
                <field-map field="partyId" from="partyId"/>
                <date-filter/>
            </entity-find>
            <if condition="PCMPAList">
                <set field="PCMPA" from="PCMPAList[0]"/>
                <set field="postalContactMechId" from="PCMPA.postalContactMechId"/>
                <set field="countryGeoId" from="PCMPA.countryGeoId"/>
                <set field="address1" from="PCMPA.address1"/>
                <set field="address2" from="PCMPA.address2"/>
                <set field="city" from="PCMPA.city"/>
                <set field="stateProvinceGeoId" from="PCMPA.stateProvinceGeoId"/>
                <set field="postalCode" from="PCMPA.postalCode"/>
            </if>
            
            <entity-find entity-name="PartyContactMechTelecomNumber" value-field="PCMTNList">
                <field-map field="partyId" from="partyId"/>
                <date-filter/>
            </entity-find>
            <if condition="PCMTNList">
                <set field="PCMTN" from="PCMTNList[0]"/>
                <set field="telecomContactMechId" from="PCMTN.telecomContactMechId"/>
                <set field="telecomContactMechPurposeId" from="PCMTN.contactMechPurposeId"/>
                <set field="areaCode" from="PCMTN.areaCode"/>
                <set field="contactNumber" from="PCMTN.contactNumber"/>
            </if>
            
            <entity-find entity-name="ContactMech" value-field="PCMTNList">
                <field-map field="partyId" from="partyId"/>
                <field-map field="contactMechTypeEnumId" value="CmtEmailAddress"/>
                <date-filter/>
            </entity-find>
            <if condition="PCMList">
                <set field="PCM" from="PCMList[0]"/>
                <set field="emailContactMechId" from="PCM.contactMechId"/>
                <set field="emailContactMechPurposeId" from="PCMTN.contactMechPurposeId"/>
                <set field="emailAddress" from="PCM.infoString"/>
            </if>
        </actions>
    </service>
</services>
