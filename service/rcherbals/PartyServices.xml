<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.2.xsd">
	<service verb="getPartyList" type="script" authenticate="false"
	         location="component://rc/script/rcherbals/party/getPartyList.groovy">
	    <in-parameters>
	        <parameter name="lastName" required="false"/>
	        <parameter name="firstName" required="false"/>
	    </in-parameters>
	    <out-parameters>
	        <parameter name="items" type="List" required="true"/>
	        <parameter name="identifier" required="true" default-value="partyId"/>
	    </out-parameters>
	</service>
	<service verb="queryParty" type="script" authenticate="false"
	         location="component://rc/script/rcherbals/party/queryParty.groovy">
	    <in-parameters>
	        <!--parameter name="isPersonType" type="Boolean" required="false" default-value="false"/>
	        <parameter name="isOrganizationType" type="Boolean" required="false" default-value="false"/-->
	        <parameter name="partyTypeEnumId" required="true"/>
	        <parameter name="firstName" required="false"/>
	        <parameter name="lastName" required="false"/>
	        <parameter name="organizationName" required="false"/>
	        <parameter name="emailAddress" required="false"/>
	        <parameter name="contactNumber" required="false"/>
	        <parameter name="city" required="false"/>
	        <parameter name="stateProvinceGeoId" required="false"/>
	        <parameter name="postalCode" required="false"/>
	        <parameter name="toPartyId" required="false"/>
	        <parameter name="fromPartyIdList" type="List" required="false"/>
	        <parameter name="searchRange" required="false"/>
	        <parameter name="geoRestrain" required="false"/>
	        <parameter name="geoCity" required="false"/>
	        <parameter name="geoStateProvinceGeoId" required="false"/>
	        <parameter name="geoPostalCode" required="false"/>
	        
	        <parameter name="offset" type="Integer" default-value="0" required="false"/>
	        <parameter name="limit" type="Integer" default-value="100" required="false"/>
	        <parameter name="pageSize" type="Integer" default-value="500" required="false"/>
	    </in-parameters>
	    <out-parameters>
	        <parameter name="items" type="List" required="true"/>
	    </out-parameters>
	</service>

    <service verb="storeParty" type="inline" authenticate="false">
        <in-parameters>
            <parameter name="partyId" type="String" required="false"/>
            <parameter name="parentPartyId" type="String" required="false"/>
            <parameter name="roleTypeId" type="String" required="false" default-value="Reseller"/>
            <parameter name="partyTypeEnumId" type="String" required="false"/>
            <parameter name="relationshipTypeEnumId" type="String" required="false" default-value="PrtCustomer"/>
            <parameter name="postalData" type="List" required="false"/>
            <parameter name="emailData" type="List" required="false"/>
            <parameter name="phoneData" type="List" required="false"/>
            <parameter name="webData" type="List" required="false"/>
            <parameter name="lastName" type="String" required="false"/>
            <parameter name="firstName" type="String" required="false"/>
            <parameter name="middleName" type="String" required="false"/>
            <parameter name="organizationName" type="String" required="false"/>
        </in-parameters>
	    <out-parameters>
	        <parameter name="items" type="List" required="true"/>
	    </out-parameters>
        <actions>
            <!--script><![CDATA[
            import groovy.json.JsonSlurper

            ec.artifactExecution.disableAuthz()            
            org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger("addNewParty")
            logger.info("in addNewParty 2, data: ${ec.web.parameters}")
            def slurper = new JsonSlurper()
            def data = slurper.parseText(ec.web.parameters.data)
            //logger.info("result: ${result}")
            ]]></script-->
            <log message="context:  ${context}"/>
            <set field="item" from="[:]"/>
            <set field="item.partyId" from="context.partyId"/>
            <if condition="partyId">
                    <entity-find-one entity-name="Party" value-field="party">
                        <field-map field-name="partyId" from="partyId"/>
                    </entity-find-one>
            </if>
            <if condition="party">
                <then>
                    <log message="party  (edit  1):  ${party}"/>
                    <set field="item.partyId" from="party.partyId"/>
                    <set field="item.partyTypeEnumId" from="party.partyTypeEnumId"/>

                    <if condition="partyTypeEnumId=='PtyPerson'">
                        <then>
                            <entity-find-one entity-name="Person" value-field="person">
                                <field-map field-name="partyId" from="partyId"/>
                            </entity-find-one>
                            <log message="person  (edit  1):  ${person}"/>
                            <entity-set value-field="person" map="context"/>
                            <entity-update value-field="person"/>
                            <log message="person  (edit  2):  ${person}"/>
                            <set field="item.firstName" from="person.firstName"/>
                            <set field="item.lastName" from="person.lastName"/>
                            <set field="item.middleName" from="person.middleName"/>
                        </then>
                        <else>
                            <entity-find-one entity-name="Organization" value-field="organization">
                                <field-map field-name="partyId" from="partyId"/>
                            </entity-find-one>
                            <log message="organization  (edit  1):  ${organization}"/>
                            <entity-set value-field="organization" map="context"/>
                            <entity-update value-field="organization"/>
                            <log message="organization  (edit  2):  ${organization}"/>
                            <set field="item.organizationName" from="organization.organizationName"/>
                        </else>
                    </if>                
                </then>
                <else>
                    <entity-make-value entity-name="Party" value-field="party"/>
                    <log message="party  (create  1):  ${party}"/>
                    <entity-set value-field="party" include="nonpk" map="context"/>    
                    <if condition="partyId">
                        <then>
                            <set field="party.partyId" from="partyId"/>
                        </then>
                        <else>
                            <entity-sequenced-id-primary value-field="party"/>
                        </else>
                    </if>
                    <entity-create value-field="party"/>  
                    <log message="party  2:  ${party}"/>
                    <set field="partyId" from="party.partyId"/>
                            
                    <if condition="partyTypeEnumId=='PtyPerson'">
                            <entity-make-value entity-name="Person" value-field="person"/>
                            <entity-set value-field="person" include="nonpk" map="context"/>  
                            <log message="person:  ${person}"/>
                            <set field="person.partyId" from="party.partyId"/>
                            <log message="person2:  ${person}"/>
                            <entity-create value-field="person"/>  
                            <log message="person3:  ${person}"/>
                            <set field="item.firstName" from="person.firstName"/>
                            <set field="item.lastName" from="person.lastName"/>
                            <set field="item.middleName" from="person.middleName"/>
                        <else>
                            <entity-make-value entity-name="Organization" value-field="organization"/>
                            <entity-set value-field="organization" include="nonpk" map="context"/>  
                            <log message="organization:  ${organization}"/>
                            <set field="organization.partyId" from="party.partyId"/>
                            <log message="organization2:  ${organization}"/>
                            <entity-create value-field="organization"/>  
                            <log message="organization3:  ${organization}"/>
                            <set field="item.organizationName" from="organization.organizationName"/>
                        </else>
                    </if>
                </else>
            </if>
                        <set field="item.partyId" from="party.partyId"/>
                        <log message="item  (after  party):  ${item}"/>
                        <log message="party  (after  party):  ${party}"/>
            
            <check-errors/>
            
            <set field="returnPostal" from="[]"/>
            <iterate list="postalData" entry="postal">
                        <log message="storeParty postal  ( edit):  ${postal}"/>
                <if condition="postal.contactMechId">
                    <then>
                        <log message="postal.contactMechId  (0):  ${postal.contactMechId}"/>
                        <set field="thisContactMechId" from="postal.contactMechId"/>
                        <log message="thisContactMechId  (0):  ${thisContactMechId}"/>
                        <entity-find entity-name="PartyContactMechPostalAddress" list="postalAddressList">
                            <econditions>
                                <econdition field-name="partyId" from="party.partyId"/>
                                <econdition field-name="contactMechId" from="thisContactMechId"/>
                            </econditions>
                        </entity-find>
                        <check-errors/>
                        <log message="postalAddressList:  ${postalAddressList}"/>
                        <set field="postalAddress" from="postalAddressList ?  postalAddressList[0]  :  null"/>
                        <if>
                            <condition>
                                    <expression>
                                    !((postal.address1 == postalAddress.address1) 
                                        &amp;&amp; (postal.address2 == postalAddress.address2)
                                        &amp;&amp; (postal.city == postalAddress.city)
                                        &amp;&amp; (postal.stateProvinceGeoId == postalAddress.stateProvinceGeoId)
                                        &amp;&amp; (postal.postalCode == postalAddress.postalCode)
                                        &amp;&amp; (postal.contactMechPurposeId == postalAddress.contactMechPurposeId)
                                        &amp;&amp; (postal.fromDate == postalAddress.fromDate)
                                        &amp;&amp; (postal.thruDate == postalAddress.thruDate)
                                        )
                                    </expression>                                
                            </condition>
                            <then>
                                <set field="postal.partyId" from="party.partyId"/>
                                <log message="postal  4:  ${postal},  party.partyId:  ${party.partyId}"/>
                            
                                <service-call name="mantle.party.ContactServices.update#PartyPostalAddress" in-map="postal" out-map="postalOut">
                                </service-call>
                                <log message="postalOut  4:  ${postalOut}"/>
                                <check-errors/>
                                <set field="postal.contactMechId" from="postalOut.contactMechId"/>
                            </then>
                        </if>
                    </then>
                    <else>
                        <set field="postal.partyId" from="party.partyId"/>
                        <set field="postal.contactMechTypeEnumId" value="CmtPostalAddress"/>
                        <log message="postal  2:  ${postal},  party.partyId:  ${party.partyId}"/>
                    
                        <service-call name="mantle.party.ContactServices.create#PostalAddress" in-map="postal" out-map="postalOut">
                        </service-call>
                        <log message="postalOut  2:  ${postalOut}"/>
                        <check-errors/>
                        <set field="postal.contactMechId" from="postalOut.contactMechId"/>
                        <!--set field="returnRec" from="[contactMechId: postalOut.contactMechId, address1: postalOut.address1, address2: postalOut.address2, city: postalOut.city, stateProvinceGeoId: postalOut.stateProvinceGeoId, postalCode: postalOut.postalCode]"/>
                        <log message="returnRec:  ${returnRec}"/>
                        <set field="returnPostal" from="returnPostal.push(returnRec)"/>
                        <script><![CDATA[
                             returnPostal.push(returnRec)
                        ]]></script>
                        <log message="returnPostal:  ${returnPostal}"/-->
                    </else>
                </if>
            </iterate>
            <log message="postalData  1:  ${postalData}"/>
<!--            
            <log message="emailData  1:  ${emailData}"/>
            <iterate list="emailData" entry="email">
                <if condition="email.contactMechId">
                    <then>
                        <entity-find-one entity-name="PartyContactMechInfo" value-field="emailAddress">
                            <econditions>
                                <econdition field-name="partyId" from="party.partyId"/>
                                <econdition field-name="contactMechId" from="email.contactMechId"/>
                            </econditions>
                        </entity-find-one>
                        <check-errors/>
                        <if>
                            <condition>
                                <not>
                                    <and>
                                        <compare field="email.infoString" to-field="emailAddress.infoString"/>
                                        <compare field="email.contactMechPurposeId" to-field="emailAddress.contactMechPurposeId"/>
                                        <compare field="email.fromDate" to-field="emailAddress.fromDate"/>
                                        <compare field="email.thruDate" to-field="emailAddress.thruDate"/>
                                    </and>
                                </not>
                            </condition>
                            <then>
                                <log message="email  1:  ${email},  party.partyId:  ${party.partyId}"/>
                            
                                <service-call name="mantle.party.ContactServices.update#PartyContactOther" in-map="email" out-map="emailOut">
                                </service-call>
                                <log message="emailOut  1:  ${emailOut}"/>
                                <check-errors/>
                            </then>
                        </if>
                    </then>
                    <else>
                        <set field="email.partyId" from="party.partyId"/>
                        <set field="email.contactMechTypeEnumId" value="CmtTelecomNumber"/>
                        <log message="email  1:  ${email},  party.partyId:  ${party.partyId}"/>
                    
                        <service-call name="mantle.party.ContactServices.create#EmailAddress" in-map="email" out-map="emailOut">
                        </service-call>
                        <log message="emailOut  1:  ${emailOut}"/>
                        <check-errors/>
                        <set field="email.contactMechId" from="emailOut.contactMechId"/>
                    </else>
                </if>
            </iterate>
            <log message="emailData  1:  ${emailData}"/>
            
            <iterate list="phoneData" entry="phone">
                <set field="phone.partyId" from="party.partyId"/>
                <set field="phone.contactMechTypeEnumId" value="CmtTelecomNumber"/>
                <log message="phone:  ${phone}"/>
                <service-call name="mantle.party.ContactServices.createTelecomNumber" in-map="phone" out-map="phoneOut">
                </service-call>
                <check-errors/>
                <set field="phone.contactMechId" from="phoneOut.contactMechId"/>
            </iterate>
            <log message="phoneData  1:  ${phoneData}"/>
            
            <log message="phoneData  2:  ${phoneData}"/>
            <iterate list="phoneData" entry="phone">
                <if condition="phone.contactMechId">
                    <then>
                        <entity-find-one entity-name="PartyContactMechTelecomNumber" value-field="telecomNumber">
                            <econditions>
                                <econdition field-name="partyId" from="party.partyId"/>
                                <econdition field-name="contactMechId" from="phone.contactMechId"/>
                            </econditions>
                        </entity-find-one>
                        <check-errors/>
                        <if>
                            <condition>
                                <not>
                                    <and>
                                        <compare field="phone.infoString" to-field="telecomNumber.contactNumber"/>
                                        <compare field="phone.contactMechPurposeId" to-field="telecomNumber.contactMechPurposeId"/>
                                        <compare field="phone.fromDate" to-field="telecomNumber.fromDate"/>
                                        <compare field="phone.thruDate" to-field="telecomNumber.thruDate"/>
                                    </and>
                                </not>
                            </condition>
                            <then>
                                <log message="phone  1:  ${phone},  party.partyId:  ${party.partyId}"/>
                            
                                <service-call name="mantle.party.ContactServices.update#PartyContactOther" in-map="phone" out-map="phoneOut">
                                </service-call>
                                <log message="phoneOut  1:  ${phoneOut}"/>
                                <check-errors/>
                            </then>
                        </if>
                    </then>
                    <else>
                        <set field="phone.partyId" from="party.partyId"/>
                        <set field="phone.contactMechTypeEnumId" value="CmtTelecomNumber"/>
                        <log message="phone  1:  ${phone},  party.partyId:  ${party.partyId}"/>
                    
                        <service-call name="mantle.party.ContactServices.create#PartyTelecomNumber" in-map="phone" out-map="phoneOut">
                        </service-call>
                        <log message="phoneOut  1:  ${phoneOut}"/>
                        <check-errors/>
                        <set field="phone.contactMechId" from="phoneOut.contactMechId"/>
                    </else>
                </if>
            </iterate>
            <log message="phoneData  1:  ${phoneData}"/>
            -->
            <set field="returnEmail" from="[]"/>
            <iterate list="emailData" entry="email">
                        <log message="storeParty email  ( edit):  ${email}"/>
                <if condition="email.contactMechId">
                    <then>
                        <log message="email.contactMechId  (0):  ${email.contactMechId}"/>
                        <set field="thisContactMechId" from="email.contactMechId"/>
                        <log message="thisContactMechId  (0):  ${thisContactMechId}"/>
                        <entity-find entity-name="PartyContactMech" list="emailAddressList">
                            <econditions>
                                <econdition field-name="partyId" from="party.partyId"/>
                                <econdition field-name="contactMechId" from="thisContactMechId"/>
                            </econditions>
                        </entity-find>
                        <check-errors/>
                        <log message="emailAddressList:  ${emailAddressList}"/>
                        <set field="emailAddress" from="emailAddressList ?  emailAddressList[0]  :  null"/>
                        <if>
                            <condition>
                                    <expression>
                                    !((email.infoString == emailAddress.infoString) 
                                        &amp;&amp; (email.contactMechPurposeId == emailAddress.contactMechPurposeId)
                                        &amp;&amp; (email.fromDate == emailAddress.fromDate)
                                        &amp;&amp; (email.thruDate == emailAddress.thruDate)
                                        )
                                    </expression>                                
                            </condition>
                            <then>
                                <set field="email.partyId" from="party.partyId"/>
                                <log message="email  4:  ${email},  party.partyId:  ${party.partyId}"/>
                            
                                <service-call name="mantle.party.ContactServices.update#PartyContactOther" in-map="email" out-map="emailOut">
                                </service-call>
                                <log message="emailOut  4:  ${emailOut}"/>
                                <check-errors/>
                                <set field="email.contactMechId" from="emailOut.contactMechId"/>
                            </then>
                        </if>
                    </then>
                    <else>
                        <set field="email.partyId" from="party.partyId"/>
                        <set field="email.contactMechTypeEnumId" value="CmtEmailAddress"/>
                        <set field="email.emailAddress" from="email.infoString"/>
                        <log message="email  2:  ${email},  party.partyId:  ${party.partyId}"/>
                    
                        <service-call name="mantle.party.ContactServices.create#EmailAddress" in-map="email" out-map="emailOut">
                        </service-call>
                        <log message="emailOut  2:  ${emailOut}"/>
                        <check-errors/>
                        <set field="email.contactMechId" from="emailOut.contactMechId"/>
                        <!--set field="returnRec" from="[contactMechId: emailOut.contactMechId, address1: emailOut.address1, address2: emailOut.address2, city: emailOut.city, stateProvinceGeoId: emailOut.stateProvinceGeoId, emailCode: emailOut.emailCode]"/>
                        <log message="returnRec:  ${returnRec}"/>
                        <set field="returnEmail" from="returnEmail.push(returnRec)"/>
                        <script><![CDATA[
                             returnEmail.push(returnRec)
                        ]]></script>
                        <log message="returnEmail:  ${returnEmail}"/-->
                    </else>
                </if>
            </iterate>
            
            <set field="returnPhone" from="[]"/>
            <iterate list="phoneData" entry="phone">
                        <log message="storeParty phone  ( edit):  ${phone}"/>
                <if condition="phone.contactMechId">
                    <then>
                        <log message="phone.contactMechId  (0):  ${phone.contactMechId}"/>
                        <set field="thisContactMechId" from="phone.contactMechId"/>
                        <log message="thisContactMechId  (0):  ${thisContactMechId}"/>
                        <entity-find entity-name="PartyContactMechTelecomNumber" list="phoneNumberList">
                            <econditions>
                                <econdition field-name="partyId" from="party.partyId"/>
                                <econdition field-name="contactMechId" from="thisContactMechId"/>
                            </econditions>
                        </entity-find>
                        <check-errors/>
                        <log message="phoneNumberList:  ${phoneNumberList}"/>
                        <set field="telecomNumber" from="phoneNumberList ?  phoneNumberList[0]  :  null"/>
                        <if>
                            <condition>
                                    <expression>
                                    !((phone.contactNumber == telecomNumber.contactNumber) 
                                        &amp;&amp; (phone.contactMechPurposeId == telecomNumber.contactMechPurposeId)
                                        &amp;&amp; (phone.fromDate == telecomNumber.fromDate)
                                        &amp;&amp; (phone.thruDate == telecomNumber.thruDate)
                                        )
                                    </expression>                                
                            </condition>
                            <then>
                                <set field="phone.partyId" from="party.partyId"/>
                                <log message="phone  4:  ${phone},  party.partyId:  ${party.partyId}"/>
                            
                                <service-call name="mantle.party.ContactServices.update#PartyTelecomNumber" in-map="phone" out-map="phoneOut">
                                </service-call>
                                <log message="phoneOut  4:  ${phoneOut}"/>
                                <check-errors/>
                                <set field="phone.contactMechId" from="phoneOut.contactMechId"/>
                            </then>
                        </if>
                    </then>
                    <else>
                        <set field="phone.partyId" from="party.partyId"/>
                        <set field="phone.contactMechTypeEnumId" value="CmtPhoneAddress"/>
                        <!--set field="phone.contactNumber" from="phonecontactNumber"/-->
                        <log message="phone  2:  ${phone},  party.partyId:  ${party.partyId}"/>
                    
                        <service-call name="mantle.party.ContactServices.create#TelecomNumber" in-map="phone" out-map="phoneOut">
                        </service-call>
                        <log message="phoneOut  2:  ${phoneOut}"/>
                        <check-errors/>
                        <set field="phone.contactMechId" from="phoneOut.contactMechId"/>
                        <!--set field="returnRec" from="[contactMechId: phoneOut.contactMechId, address1: phoneOut.address1, address2: phoneOut.address2, city: phoneOut.city, stateProvinceGeoId: phoneOut.stateProvinceGeoId, phoneCode: phoneOut.phoneCode]"/>
                        <log message="returnRec:  ${returnRec}"/>
                        <set field="returnPhone" from="returnPhone.push(returnRec)"/>
                        <script><![CDATA[
                             returnPhone.push(returnRec)
                        ]]></script>
                        <log message="returnPhone:  ${returnPhone}"/-->
                    </else>
                </if>
            </iterate>
            <log message="emailData  1:  ${emailData}"/>
                <entity-make-value entity-name="PartyRole" value-field="partyRole"/>
                <set field="partyRole.partyId" from="party.partyId"/>
                <set field="partyRole.roleTypeId" from="roleTypeId"/>
                <entity-find-one entity-name="PartyRole" value-field="existPartyRole">
                    <field-map field-name="partyId" from="partyRole.partyId"/>
                    <field-map field-name="roleTypeId" from="partyRole.roleTypeId"/>
                </entity-find-one>
                <log message="storeParty, existPartyRole  1:  ${existPartyRole}"/>
                <if condition="!existPartyRole">
                    <entity-create value-field="partyRole"/>  
                    <log message="partyRole  1:  ${partyRole}"/>
                </if>
                
                <if condition="partyRelationshipId">
                    <then>
                        <entity-find-one entity-name="PartyRelationshipId" value-field="partyRelationship">
                            <field-map field-name="partyRelationshipId" from="partyRelationshipId"/>
                        </entity-find-one>
                        <if condition="relationshipTypeEnumId != partyRelationship.relationshipTypeEnumId &amp;&amp; !partyRelationship.thruDate">
                            <set field="partyRelationship.relationshipTypeEnumId" from="relationshipTypeEnumId" />
                            <log message="storeParty, partyRelationship   (update):  ${partyRelationship}"/>
                            <entity-update value-field="partyRelationship"/>  
                        </if>
                    </then>
                    <else>
                        <entity-make-value entity-name="PartyRelationship" value-field="partyRelation"/>
                        <set field="partyRelation.toPartyId" from="parentPartyId"/>
                        <set field="partyRelation.toRoleTypeId" value="Owner"/>
                        <set field="partyRelation.fromPartyId" from="party.partyId"/>
                        <set field="partyRelation.fromRoleTypeId" from="roleTypeId"/>
                        <set field="partyRelation.relationshipTypeEnumId" from="relationshipTypeEnumId"/>
                        <set field="partyRelation.fromDate" from="ec.user.nowTimestamp"/>
                        <entity-sequenced-id-primary value-field="partyRelation"/>
                        <entity-create value-field="partyRelation"/>  
                    </else>
                </if>
                <log message="partyRelation  2:  ${partyRelation}"/>
                
                <set field="item.emailData" from="emailData"/>
                <set field="item.parentPartyId" from="partyRelation.toPartyId"/>
                <set field="item.relationshipTypeEnumId" from="partyRelation.relationshipTypeEnumId"/>
                <set field="item.partyRelationshipId" from="partyRelation.partyRelationshipId"/>
                <log message="item:  ${item}"/>
                <set field="item2" from="[]"/>
                <set field="item2[0]" from="item"/>
                
                <log message="item2:  ${item2}"/>
                <set field="result.items" from="item2"/>
                <check-errors/>
                <log message="result  2:  ${result}"/>
        </actions>
    </service>
    
    <service verb="deleteParty" type="inline" authenticate="false">
        <in-parameters>
            <parameter name="partyId" type="String" required=" true"/>
            <parameter name="parentPartyId" type="String" required="false" default-value="RCHERBALS"/>
            <parameter name="relationshipTypeEnumId" type="String" required="false"/>
            <parameter name="roleTypeId" type="String" required="false"/>
            
        </in-parameters>
	    <out-parameters>
	    </out-parameters>
        <actions>
            <log message="deleteParty, context:  ${context}"/>
            <entity-find entity-name="PartyRelationship" list="partyRelationshipList">
                <econditions>
                    <econdition field-name="toPartyId" from="parentPartyId"/>
                    <econdition field-name="relationshipTypeEnumId" from="relationshipTypeEnumId" ignore-if-empty="true"/>
                    <econdition field-name="roleTypeId" from="roleTypeId" ignore-if-empty="true"/>
                    <econdition field-name="fromPartyId" from="partyId" ignore-if-empty="false"/>
                </econditions>
            </entity-find>
            <log message="deleteParty, partyRelationshipList:  ${partyRelationshipList}"/>
            <iterate entry="partyRelation" list="partyRelationshipList">
                <entity-find entity-name="PartyContactMech" list="partyContactMechList">
                    <econditions>
                        <econdition field-name="partyId" from="partyRelation.fromPartyId"/>
                    </econditions>
                </entity-find>
                <iterate entry="partyContactMech" list="partyContactMechList">
                    <entity-delete value-field="partyContactMech"/>
                    <entity-delete-by-condition entity-name="PostalAddress" >
                        <econdition field-name="contactMechId" from="partyContactMech.contactMechId"/>
                    </entity-delete-by-condition>
                    <entity-delete-by-condition entity-name="TelecomNumber" >
                        <econdition field-name="contactMechId" from="partyContactMech.contactMechId"/>
                    </entity-delete-by-condition>
                    <entity-delete-by-condition entity-name="ContactMech" >
                        <econdition field-name="contactMechId" from="partyContactMech.contactMechId"/>
                    </entity-delete-by-condition>
                </iterate>
                <entity-delete-by-condition entity-name="PartyRelationship" >
                    <econdition field-name="toPartyId" from="thisPartyId"/>
                </entity-delete-by-condition>
                <entity-delete-by-condition entity-name="ProductParty" >
                    <econdition field-name="partyId" from="thisPartyId"/>
                </entity-delete-by-condition>
                <entity-delete-by-condition entity-name="ProductCategoryParty" >
                    <econdition field-name="partyId" from="thisPartyId"/>
                </entity-delete-by-condition>
                <set field="thisPartyId" from="partyRelation.fromPartyId"/>
                <entity-delete value-field="partyRelation"/>
                <entity-delete-by-condition entity-name="Person" >
                    <econdition field-name="partyId" from="thisPartyId"/>
                </entity-delete-by-condition>
                <entity-delete-by-condition entity-name="Organization" >
                    <econdition field-name="partyId" from="thisPartyId"/>
                </entity-delete-by-condition>
            </iterate>
            <script><![CDATA[
            ]]></script>
        </actions>
    </service>
    
    <service verb="getPartyAndContacts" type="inline" authenticate="false">
        <in-parameters>
            <parameter name="partyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="firstName" required="false"/>
            <parameter name="middleName"/>
            <parameter name="lastName" required="false"/>

	        <parameter name="organizationName" required="false"/>
            
            <parameter name="newPassword" required="false"/>
            <parameter name="newPasswordVerify" required="false"/>

            <parameter name="currencyUomId"/>
            <parameter name="locale"/>
            <parameter name="parentPartyId"/>
            
            <parameter name="primaryRoleTypeId" />
            <parameter name="partyTypeEnumId" />
            <parameter name="statusId" />
            
            <parameter name="postalContactMechId" type="String" required="false"/>
            <parameter name="countryGeoId" type="String" required="false"/>
            <parameter name="address1" type="String" required="false"/>
            <parameter name="address2" type="String" required="false"/>
            <parameter name="city" type="String" required="false"/>
            <parameter name="stateProvinceGeoId" type="String" required="false"/>
            <parameter name="postalCode" type="String" required="false"><text-digits/></parameter>

            <parameter name="telecomContactMechId" type="String" required="false"/>
            <parameter name="areaCode" type="String" required="false"><text-digits/></parameter>
            <parameter name="contactNumber" type="String" required="false"><text-digits/></parameter>

            <parameter name="emailContactMechId" type="String" required="false"/>
            <parameter name="emailAddress" required="false"></parameter>
            <parameter name="postalContactMechPurposeId" required="false" default-value="PRIMARY_LOCATION"/>
            <parameter name="telecomContactMechPurposeId" required="false" default-value="PRIMARY_PHONE"/>
            <parameter name="emailContactMechPurposeId" required="false" default-value="PRIMARY_EMAIL"/>
            <parameter name="partyId" required="true"/>
            <parameter name="postalContactMechId" required="false"/>
            <parameter name="telecomContactMechId" required="false"/>
            <parameter name="emailContactMechId" required="false"/>
        </out-parameters>

        <actions>
            <entity-find-one entity-name="Party" value-field="returnParty"/>
            <set field="partyTypeEnumId" from="returnParty.partyTypeEnumId"/>
            <check-errors/>
            <if condition="returnParty.partyTypeEnumId == 'PtyPerson'">
                <entity-find-one entity-name="Person" value-field="origPerson"/>
                <check-errors/>
                <set field="firstName" from="origPerson.firstName"/>
                <set field="middleName" from="origPerson.middleName"/>
                <set field="lastName" from="origPerson.lastName"/>
            </if>
            <if condition="partyTypeEnumId == 'PtyOrganization'">
                <entity-find-one entity-name="Organization" value-field="origOrganization"/>
                <check-errors/>
                <set field="organizationName" from="origOrganization.organizationName"/>
            </if>
            
            <entity-find entity-name="PartyContactMechPostalAddress" value-field="PCMPAList">
                <field-map field="partyId" from="partyId"/>
                <date-filter/>
            </entity-find>
            <if condition="PCMPAList">
                <set field="PCMPA" from="PCMPAList[0]"/>
                <set field="postalContactMechId" from="PCMPA.postalContactMechId"/>
                <set field="countryGeoId" from="PCMPA.countryGeoId"/>
                <set field="address1" from="PCMPA.address1"/>
                <set field="address2" from="PCMPA.address2"/>
                <set field="city" from="PCMPA.city"/>
                <set field="stateProvinceGeoId" from="PCMPA.stateProvinceGeoId"/>
                <set field="postalCode" from="PCMPA.postalCode"/>
            </if>
            
            <entity-find entity-name="PartyContactMechTelecomNumber" value-field="PCMTNList">
                <field-map field="partyId" from="partyId"/>
                <date-filter/>
            </entity-find>
            <if condition="PCMTNList">
                <set field="PCMTN" from="PCMTNList[0]"/>
                <set field="telecomContactMechId" from="PCMTN.telecomContactMechId"/>
                <set field="telecomContactMechPurposeId" from="PCMTN.contactMechPurposeId"/>
                <set field="areaCode" from="PCMTN.areaCode"/>
                <set field="contactNumber" from="PCMTN.contactNumber"/>
            </if>
            
            <entity-find entity-name="ContactMech" value-field="PCMTNList">
                <field-map field="partyId" from="partyId"/>
                <field-map field="contactMechTypeEnumId" value="CmtEmailAddress"/>
                <date-filter/>
            </entity-find>
            <if condition="PCMList">
                <set field="PCM" from="PCMList[0]"/>
                <set field="emailContactMechId" from="PCM.contactMechId"/>
                <set field="emailContactMechPurposeId" from="PCMTN.contactMechPurposeId"/>
                <set field="emailAddress" from="PCM.infoString"/>
            </if>
        </actions>
    </service>
</services>
