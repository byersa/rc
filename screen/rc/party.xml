<?xml version="1.0" encoding="UTF-8"?>
<screen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/xml-screen-1.1.xsd"
        standalone="true"
        default-menu-include="false" require-authentication="false">

    <transition name="addNewParty">
        <service-call name="rcherbals.PartyServices.storeParty" in-map="ec.web.parameters" web-send-json-response="true">
        </service-call>
      <default-response type="none"/>
    </transition>
    
    <transition name="getLocalResellers">
        <service-call name="rcherbals.PartyServices.queryResellers" in-map="ec.web.parameters" web-send-json-response="true">
        </service-call>
      <default-response type="none"/>
    </transition>
    <transition name="updateParty">
        <actions>
            <script><![CDATA[
            import groovy.json.JsonSlurper

            ec.artifactExecution.disableAuthz()            
            org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger("updateParty")
            logger.info("in updateParty 2, data: ${ec.web.parameters}")
            def slurper = new JsonSlurper()
            ec.web.parameters.postalData = slurper.parseText(ec.web.parameters.postalData)
            ec.web.parameters.phoneData = slurper.parseText(ec.web.parameters.phoneData)
            ec.web.parameters.emailData = slurper.parseText(ec.web.parameters.emailData)
            logger.info("ec.web.parameters: ${ec.web.parameters}")
            ]]></script>
            <script></script>
            <service-call name="rcherbals.PartyServices.storeParty" in-map="ec.web.parameters" out-map="updatedData">
            </service-call>
            <script><![CDATA[
                ec.web.sendJsonResponse(updatedData)
            ]]></script>
        </actions>
      <default-response type="none"/>
    </transition>
    <transition name="getStateLookup">
        <actions>
            <script><![CDATA[
            import org.moqui.entity.EntityCondition

            ec.artifactExecution.disableAuthz()            
            org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger("getStateLookup")
            logger.info("in getStateLookup, data: ${ec.web.parameters}")
            List states = ec.entity.makeFind("Geo").condition("geoId", EntityCondition.LIKE, 'USA_%').list()
            //def edv = ef.makeEntityDynamicView()
            //def ecf = ec.entity.getConditionFactory()
            //edv.addMemberEntity("GEOASSOC", "GeoAssoc", null, null, null)
            //edv.addAliasAll("GEOASSOC", null)
            //edv.addMemberEntity("GEO", "Geo", "GEOASSOC", null, ['toGeoId':'geoId'])
            //edv.addAliasAll("GEO", 'g')
            //def cond = ecf.makeCondition("geoId", EntityCondition.EQUALS, 'USA')
            //ef.condition(cond).selectFields(['gGeoId', 'gGeoCodeAlpha2', 'gGeoName'])
            //List states = ef.list()
            logger.info("in getStateLookup, states: ${states}")
                ec.web.sendJsonResponse(states)
            ]]></script>
        </actions>
      <default-response type="none"/>
    </transition>
    <transition name="getPartyList">
        <service-call name="rcherbals.PartyServices.queryParty" in-map="ec.web.parameters"
                      web-send-json-response="true">
                      <field-map field-name="toPartyId" value="RCHERBALS"/>
                      <field-map field-name="partyTypeEnumId" value="PtyOrganization"/>
        </service-call>
        <default-response type="none"/>
    </transition>
    <transition name="queryParty">
        <service-call name="rcherbals.PartyServices.queryParty" in-map="ec.web.parameters"
                      web-send-json-response="true">
        </service-call>
        <default-response type="none"/>
    </transition>
    <widgets>

    </widgets>
</screen>
